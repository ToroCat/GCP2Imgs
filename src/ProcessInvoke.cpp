/////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2015, Toro Lee. Use, modification and 
// distribution are subject to the CeCILL-B License
// Author(s): Toro Lee <poy49295@163.com>
// This is the source file that implements the function: ProcessInvoke
//
/////////////////////////////////////////////////////////////////////////////////////

#include "ProcessInvoke.h"

#undef __STRICT_ANSI__
#include <cstdio>
#include <cstdlib>

#include <random>
#include <ctime>
#include <climits>

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/system/error_code.hpp>
#include <boost/lexical_cast.hpp>

using std::string;
using std::vector;
using std::function;

using boost::filesystem::path;
using boost::system::error_code;
using boost::filesystem::initial_path;
using boost::filesystem::remove;
using boost::lexical_cast;

namespace
{
void AddDoubleQuotation(string *cmd)
{
    if(cmd->empty())
    {
        *cmd = "\"\"";
        return;
    }
    if('"' != cmd->back() && '"' != cmd->front())
    {
        cmd->insert(0, "\"");
        cmd->push_back('"');
    }
}

void ConcatenateCommand(const std::string &binPath, const vector<string> &param,
                        string *resultCommand)
{
    *resultCommand = binPath;
    AddDoubleQuotation(resultCommand);
    string tmp;
    for(const auto &par : param)
    {
        tmp = par;
        AddDoubleQuotation(&tmp);
        resultCommand->push_back(' ');
        resultCommand->append(tmp);
    }
}

class AutoBatFile
{
public:
    AutoBatFile(const string &binDirectory, const string &command)
    {
        try
        {
            // seed the random generator
            std::default_random_engine generator(time(nullptr));
            std::uniform_int_distribution<int> dis(0,INT_MAX);
            error_code errorCode;
            // for now, I just test it in Windows system
            // so the extension name only be ".bat"
            // but in the future I will adapt to other system like Linux(.sh)
            m_autoGeneratedFile = (initial_path(errorCode)/
                                   (lexical_cast<string>(dis(generator))+".bat"));
            FILE *batFile = fopen(m_autoGeneratedFile.string().c_str(), "wb");
            if(nullptr == batFile)
            {
                return;
            }
            if(false == binDirectory.empty())
            {
                string setPath("set path=%path%;\"");
                setPath.append(binDirectory);
                setPath.append("\"\n");
                fwrite(setPath.data(), 1, setPath.size(), batFile);
            }
            fwrite(command.data(), 1, command.size(), batFile);
            fclose(batFile);
        }
        catch(...)
        {}
    }
    ~AutoBatFile()
    {
        error_code errorCode;
        remove(m_autoGeneratedFile, errorCode);
    }
    void GetBatFilePath(string *filePath)const
    {
        *filePath = m_autoGeneratedFile.string();
        AddDoubleQuotation(filePath);
    }
private:
    path m_autoGeneratedFile;
};

}

void ProcessInvoke(const string &binDirectory, const string &commandName,
                   const vector<string> &param, function<void(const char*)> cmdCallback)
{
    string command;
    if(param.empty())
    {
        command = commandName;
        AddDoubleQuotation(&command);
    }
    else
    {
        ConcatenateCommand(commandName, param, &command);
    }
    AutoBatFile autoBatFile(binDirectory, command);

    string batFilePath;
    autoBatFile.GetBatFilePath(&batFilePath);
    FILE *stream = popen(batFilePath.c_str(), "r");
    char buffer[2048];
    while(fgets(buffer, sizeof(buffer), stream))
    {
        cmdCallback(buffer);
    }
    pclose(stream);
}

